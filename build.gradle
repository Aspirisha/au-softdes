import org.apache.tools.ant.filters.*

import java.nio.file.Paths
import java.util.stream.Collectors

import static java.lang.String.valueOf
import static java.util.stream.Collectors.joining

allprojects {
    group = 'au.sdshell.sample'
    version = '1.0'
}

def pathToDriverParts = ["$rootDir", "build", "target"]
def pathToToolsParts = ["$rootDir", "build", "target", "tools"]

project.ext {
    toolsDir = pathToToolsParts.stream().collect(joining(File.separator))
    driverDir = pathToDriverParts.stream().collect(joining(File.separator))
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    repositories {
        mavenCentral()
    }
}

configure(subprojects.findAll {it.name != 'common'}) {
    apply plugin: 'application'
    dependencies {
        compile project(':common')
    }
}

task createTargetDir {
    Paths.get(rootProject.toolsDir).toFile().mkdirs()
}

// driver is not a tool!
def tools = subprojects
tools.removeAll { it.name.contains('driver') }
def toolTaskGetter = { it.getTasksByName('fatJar', false) }
def toolsJars = tools.stream().map(toolTaskGetter).collect(Collectors.toList())
def registerFile = new File((String)rootProject.driverDir, ".tools")

task copyTools(type: Copy ) {
    dependsOn ':createTargetDir'
    dependsOn tools.jar

    from(toolsJars)
    into project.file(rootProject.toolsDir)
    rename { String fileName ->
        fileName.split("-")[0] }
}

task registerTools {
    dependsOn ':createTargetDir'
    registerFile.withWriter {w -> w << ""}
    configure(subprojects.findAll {it.name != 'common' && it.name != 'driver'}) {
        registerFile.withWriterAppend { w ->
            w << project.name << System.lineSeparator();
        }
    }
}

project(':driver') {
    task copyDriver(type: Copy, dependsOn: ':driver:fatJar') {
        from(project.getTasksByName('fatJar', false))
        into project.file(rootProject.driverDir)
        rename { String fileName -> "driver.jar" }
    }
}

task deploy()  {
    println "Deploying driver into " + rootProject.driverDir
    println "Deploying tools into " + rootProject.toolsDir

    dependsOn ':copyTools'
    dependsOn ':registerTools'
    dependsOn ':driver:copyDriver'
}